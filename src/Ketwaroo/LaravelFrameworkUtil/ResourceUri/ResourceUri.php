<?php

/**
 * @copyright (c) 2014, 3C Institute
 */

namespace Ketwaroo\LaravelFrameworkUtil\ResourceUri;

use Ketwaroo\LaravelFrameworkUtil\Constant as FConst;

/**
 * Description of ResourceUri
 *
 * @author Yaasir Ketwaroo <ketwaroo@3cisd.com>
 */
class ResourceUri
{

    use \Ketwaroo\LaravelFrameworkUtil\Patterns\TraitSingleton,
        \Ketwaroo\LaravelFrameworkUtil\Patterns\TraitIsInPackage;

    protected $_resourceUriResolver = array();
    protected $_resolvedUriCache    = array();

    /**
     * returns a uri resolver for the specifued 
     * @param string $uri
     * @return Schema\SchemaAbstract
     */
    public function resolveResourceUri($uri, $baseUrl = NULL, $basePath = NULL, $handler = NULL)
    {
        $k = md5("{$uri},{$basePath},{$baseUrl}");

        if(!isset($this->_resolvedUriCache[$k]))
        {
            $parts = ccc_parse_url($uri);

            if(empty($handler))
            {
                if((\Cccisd\Util\Package::isPackageNamespaceString($uri)))
                {
                    $handler = FConst::RESOURCEURI_SCHEMA_ASSET; // if package string should always be asset.
                }
                else
                {
                    $handler = $this->readPackageConfig(FConst::CONFIGKEY_RESOURCEURI_DEFAULTSCHEMA, FConst::RESOURCEURI_DEFAULTSCHEMA);
                }
            }
            if(empty($parts['scheme']))
            {
                if(strpos($uri, '//') === 0)
                {
                    $parts['scheme'] = 'passthru';
                }
                else
                {
                    $parts['scheme'] = $handler;
                }
            }

            $resolver = $this->getResourceUriResolver($parts['scheme'], $uri);

            $resolver->setBasePath($basePath)
                    ->setBaseUrl($baseUrl)
                    ->parse();

            $this->_resolvedUriCache[$k] = $resolver;
        }

        return $this->_resolvedUriCache[$k];
    }

    /**
     * 
     * @param string $schema handler type
     * @param string $location the actual url.
     * @return Schema\SchemaAbstract
     * @throws \Exception
     */
    protected function getResourceUriResolver($schema, $location)
    {
        $schema = strtolower($schema);
        if(empty($this->_resourceUriResolver[$schema]))
        {

            $class = __NAMESPACE__ . '\\Schema\\' . studly_case($schema);

            if(!class_exists($class))
            {
                throw new \Exception('Could not load resource uri handler for ' . $schema);
            }

            $this->registerResourceUriResolver($schema, $class);
        }

        $class = $this->_resourceUriResolver[$schema];

        $obj = app()->make($class, [
            'location' => $location,
        ]);

        if(($obj instanceof Schema\SchemaAbstract))
        {
            return $obj;
        }
        throw new \Exception('Invalid uri resolver for ' . $schema . ' (' . $class . ')');
    }

    /**
     * makes
     * @param type $schema
     * @param type $class
     * @return \Ketwaroo\LaravelFrameworkUtil\ResourceUri\ResourceUri
     * @throws \Exception
     */
    public function registerResourceUriResolver($schema, $class)
    {
        $schema                              = strtolower($schema);
        $this->_resourceUriResolver[$schema] = $class;
        return $this;
    }

    /**
     * Serves files as generated by the Assets Resource URI handler
     * @param string $packageName vendor/package
     * @param string $file path fo file within the public folder of the package.
     */
    public function serveDevFile($packageName, $file)
    {
        $filePath = \Cccisd\Util\Package::detectPackageBasePath($packageName) . '/public' . $file;

        if(!is_file($filePath))
        {
            \App::abort(404);
        }

        $lastmodified = \Request::header('if-modified-since');

        if(!empty($lastmodified) && strtotime($lastmodified) === filemtime($filePath))
        {
            \App::abort(304);
        }

        //$tmp = \Response::download($filePath);

        $ext = pathinfo($filePath, PATHINFO_EXTENSION);

        $extOverride = [
            'css' => 'text/css', // stupid css..
        ];

        $tmp = \Response::make(file_get_contents($filePath), 200, [
                    'Content-Disposition' => 'inline',
                    'Content-Type'        => (isset($extOverride[$ext])) ? $extOverride[$ext] : \Cccisd\Util\File::determineMime($filePath),
        ]);

        return $tmp;
    }

    /**
     * 
     * @return \Ketwaroo\LaravelFrameworkUtil\ResourceUri\ResourceUri
     */
    public static function instance()
    {
        return self::getInstance();
    }

}
